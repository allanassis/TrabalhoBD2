{"version":3,"sources":["components/ThumbPreview.js","Config.js","components/ListGrid.js","components/App.js","components/AddView.js","components/EditView.js","serviceWorker.js","index.js"],"names":["ThumbPreview","props","react_default","a","createElement","style","Object","objectSpread","margin","index_es","variant","component","react_dotdotdot_src_default","clamp","text","URL_SERVICE","headers","Access-Control-Allow-Origin","Content-Type","initialState","blocks","key","type","depth","inlineStyleRanges","entityRanges","data","entityMap","centerStyle","width","height","display","justifyContent","alignItems","Loading","EmptyMessage","elevation","title","message","ListGrid","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","res","json","resJ","setState","hits","hasData","console","log","createList","length","map","item","_id","Link","to","concat","textDecoration","components_ThumbPreview","_source","ListGrid_EmptyMessage","Fragment","cellHeight","cols","spacing","ListGrid_Loading","React","Component","marginTop","App","color","size","components_ListGrid","require","AddView","editorState","editorStateFromRaw","onClickSave","bind","assertThisInitialized","onChange","onChangeTitle","event","target","value","_this$state","JSON","stringify","content","editorStateToJSON","method","body","resp","ok","alert","padding","required","label","defaultValue","onClick","Megadraft","EditView","id","match","params","parse","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","Switch","Route","path","process","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29fd75ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Dotdotdot from \"react-dotdotdot\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nconst ThumbPreview = props => (\r\n  <div style={{ ...props.style, margin: 16 }}>\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"headline\" component=\"h2\">\r\n          <Dotdotdot clamp={4}>{props.text}</Dotdotdot>\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nexport default ThumbPreview;\r\n","export const URL_SERVICE = \"https://flask-service-bd2.herokuapp.com\"\r\nexport const headers = { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' }\r\nexport const initialState = {\r\n    \"blocks\": [\r\n        {\r\n            \"key\": \"4r5r7\",\r\n            \"text\": \"Digite aqui o seu text\",\r\n            \"type\": \"unstyled\",\r\n            \"depth\": 0,\r\n            \"inlineStyleRanges\": [],\r\n            \"entityRanges\": [],\r\n            \"data\": {}\r\n        }\r\n    ],\r\n    \"entityMap\": {}\r\n}","import React from \"react\";\r\nimport { GridList, GridListTile, CircularProgress, Paper, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ThumbPreview from \"./ThumbPreview\";\r\nimport { URL_SERVICE, headers } from '../Config'\r\nimport { editorStateFromRaw } from \"megadraft\";\r\n\r\nconst centerStyle = { width: '100vw', height: \"80vh\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }\r\n\r\nconst Loading = props => (\r\n  <div style={centerStyle}>\r\n    <CircularProgress variant=\"indeterminate\" />\r\n  </div>\r\n)\r\n\r\nconst EmptyMessage = props => (\r\n  <Paper elevation={1}>\r\n    <Typography variant=\"h5\" component=\"h3\">\r\n      {props.title}\r\n    </Typography>\r\n    <Typography component=\"p\">\r\n      {props.message}\r\n    </Typography>\r\n  </Paper>\r\n)\r\n\r\nclass ListGrid extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { data: [] }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(URL_SERVICE, { headers }).then(res => {\r\n      res.json().then(resJ => {\r\n        this.setState({\r\n          data: resJ.hits\r\n        })\r\n      })\r\n    })\r\n  }\r\n  render() {\r\n    const { data } = this.state\r\n\r\n    const hasData = data && data.hits\r\n    console.log(hasData)\r\n    console.log(data)\r\n    const createList = ((hasData && data.hits.length) && data.hits.map(item => (\r\n      <GridListTile style={{ width: \"auto\" }} key={item._id}>\r\n        <Link to={`/edit/${item._id}`} style={{ textDecoration: 'none' }}>\r\n          <ThumbPreview text={item._source.title} />\r\n        </Link>\r\n      </GridListTile>\r\n    )) || <EmptyMessage title=\"It is empty D:\" message=\"Click on Blue button to add a new paper\" />)\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {hasData && (<div style={centerStyle}>\r\n          <GridList cellHeight={200} cols={4} spacing={8}>\r\n            {createList}\r\n          </GridList>\r\n        </div>\r\n        ) || <Loading />}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListGrid;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport ListGrid from \"./ListGrid\";\r\n\r\nconst centerStyle = { width: '100vw', display: \"flex\", justifyContent: \"center\", marginTop: 50 }\r\n\r\nclass App extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div style={centerStyle}>\r\n          <Link to=\"/add\" style={{ textDecoration: 'none' }}>\r\n            <Button variant=\"contained\" color=\"primary\" size=\"large\">Add</Button>\r\n          </Link>\r\n        </div>\r\n        <ListGrid />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button, TextField, Snackbar, SnackbarContent, CloseIcon, IconButton, Icon } from \"@material-ui/core\";\r\n\r\nimport { MegadraftEditor, editorStateFromRaw, editorStateToJSON } from \"megadraft\";\r\n\r\nimport { URL_SERVICE, headers, initialState } from \"../Config\"\r\n\r\nrequire('megadraft/dist/css/megadraft.css');\r\n\r\n\r\nclass AddView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { editorState: editorStateFromRaw(initialState), title: \"\" };\r\n\r\n    this.onClickSave = this.onClickSave.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n  }\r\n\r\n  onChange(editorState) {\r\n    this.setState({ editorState });\r\n  }\r\n\r\n  onChangeTitle(event) {\r\n    this.setState({\r\n      title: event.target.value\r\n    })\r\n  }\r\n\r\n  onClickSave() {\r\n    const { title, editorState } = this.state\r\n    let data = JSON.stringify({ title, content: editorStateToJSON(editorState) })\r\n\r\n    fetch(URL_SERVICE, { method: \"POST\", body: data, headers }).then(resp => {\r\n      if (resp.ok) {\r\n        alert('succes')\r\n      } else {\r\n        alert('ruim')\r\n      }\r\n    })\r\n  }\r\n\r\n  onEditorStateChange(editorState) {\r\n    this.setState({\r\n      editorState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: 500, margin: \"auto\", padding: 50 }}>\r\n        <div style={{ display: \"flex\", justifyContent: \"space-around\", margin: 50 }}>\r\n          <Button variant=\"outlined\" ><Link to=\"/\" style={{ textDecoration: 'none', color: \"black\" }}>BACK</Link></Button>\r\n          <TextField\r\n            required\r\n            label=\"Title\"\r\n            defaultValue=\"Title\"\r\n            variant=\"outlined\"\r\n            onChange={this.onChangeTitle}\r\n          />\r\n          <Button variant=\"outlined\" onClick={this.onClickSave}>SAVE</Button>\r\n        </div>\r\n        <MegadraftEditor\r\n          editorState={this.state.editorState}\r\n          onChange={this.onChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddView;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button, TextField } from \"@material-ui/core\";\r\n\r\nimport { MegadraftEditor, editorStateFromRaw, editorStateToJSON } from \"megadraft\";\r\n\r\nimport { URL_SERVICE, headers, initialState } from \"../Config\"\r\n\r\nrequire('megadraft/dist/css/megadraft.css');\r\n\r\n\r\nclass EditView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { editorState: editorStateFromRaw(initialState), title: \"title\" };\r\n\r\n        this.onClickSave = this.onClickSave.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id } = this.props.match.params\r\n        fetch(`${URL_SERVICE}/?id=${id}`, { headers }).then(res => {\r\n            res.json().then(resJ => {\r\n                const data = resJ._source\r\n                this.setState({\r\n                    editorState: editorStateFromRaw(JSON.parse(data.content)),\r\n                    title: data.title\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    onChange(editorState) {\r\n        this.setState({ editorState });\r\n    }\r\n\r\n    onChangeTitle(event) {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    onClickSave() {\r\n        const { title, editorState } = this.state\r\n        const { id } = this.props.match.params\r\n        let data = JSON.stringify({ title, content: editorStateToJSON(editorState) })\r\n\r\n        fetch(`${URL_SERVICE}/?id=${id}`, { method: \"PUT\", body: data, headers })\r\n\r\n    }\r\n\r\n    onEditorStateChange(editorState) {\r\n        this.setState({\r\n            editorState\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { title } = this.state\r\n        return (\r\n            <div style={{ width: 500, margin: \"auto\", padding: 50 }}>\r\n                <div style={{ display: \"flex\", justifyContent: \"space-around\", margin: 50 }}>\r\n                    <Button variant=\"outlined\"><Link to=\"/\" style={{ textDecoration: 'none', color: \"black\" }}>BACK</Link></Button>\r\n                    <TextField\r\n                        required\r\n                        label=\"Title\"\r\n                        value={title}\r\n                        variant=\"outlined\"\r\n                        onChange={this.onChangeTitle}\r\n                    />\r\n                    <Button variant=\"outlined\" onClick={this.onClickSave}>SAVE</Button>\r\n                </div>\r\n                <MegadraftEditor\r\n                    editorState={this.state.editorState}\r\n                    onChange={this.onChange} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditView;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport AddView from \"./components/AddView\";\r\nimport EditView from \"./components/EditView\"\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path={process.env.PUBLIC_URL + \"/\"} exact component={App} />\r\n      <Route path={process.env.PUBLIC_URL + \"/add\"} component={AddView} />\r\n      <Route path={process.env.PUBLIC_URL + \"/edit/:id\"} component={EditView} />\r\n    </Switch>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}